// file generated by eventgen

package ari

import (
   "encoding/json"
   "github.com/rotisserie/eris"
)

// EventTypes enumerates the list of event types
type EventTypes struct {
	All string
	{{range .}}{{.Name}} string
	{{end}}
}

// Events is the instance for grabbing event types
var Events EventTypes

func init() {
	Events.All = "all"
	{{range .}} Events.{{.Name}} = "{{.Event}}"
	{{end}}
}

// DecodeEvent converts a JSON-encoded event to an ARI event.
func DecodeEvent(data []byte) (Event,error) {
   // Decode the event type
   var typer Message
   err := json.Unmarshal(data, &typer)
   if err != nil {
     return nil, eris.Wrap(err, "failed to decode type")
   }
   if typer.Type == "" {
     return nil, eris.New("no type found")
   }

   switch typer.Type {
   {{range .}}case Events.{{.Name}}:
      var e {{.Name}}
      err = json.Unmarshal(data, &e)
      return &e, err
   {{end}}
   }
   return nil, eris.New("unhandled type: "+typer.Type)
}

{{range .}}
// {{.Name}} - "{{.Description}}"
type {{.Name}} struct {
   EventData `json:",inline"`

   // Header describes any transport-related metadata
   Header Header `json:"-"`

	{{range .Properties}}{{.Name}} {{.Type}} {{.Mapping}} {{.Description}}
	{{end}} }
{{end}}

